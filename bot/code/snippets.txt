class Escape():
	def __init__(self, connection, cursor):
		self.con = connection;
		self.cur = cursor;	
		
	def __input(self, s, newstring, index, nofail=False):
		# if index is outside of the string
		if not nofail and index not in range(len(s)):
			return s;
		# if not erroring, but the index is still not in the correct range..
		if index < 0:  # add it to the beginning
			return newstring + s
		if index > len(s):  # add it to the end
			return s + newstring

		# insert the new string between "slices" of the original
		#print(f'Added {newstring} in the middle of {s}');
		return s[:index] + newstring + s[index + 1:]
	
	def __indexes(self, string, lookingFor, start = 0):
		string = string[start:];
		indexes = [i for i, x in enumerate(string, start) if x == lookingFor];
		return indexes;
	
	def __raw(self, string):
		return fr"{string}";
		
	def all(self, values):
		if type(values) is int:
			print('int detected')
			pass;
		elif type(values) is str:
			print('string detected')
			values= self.string(values);
		elif isinstance(values, list):
			print('array detected')
			values = self.array(values);
		elif isinstance(item, dict):
			print('dictionary detected')
			values = self.dictionary(values);
		else:
			print('else detected')
			pass;
		return values;
	
	def string(self, string, passEscaped = True):
		cur = self.cur;
		print(f'working on string: {string}');
		string = self.__raw(string);
		print(f'working on string: {string}; as raw');
		elements = {'"': "\\\"", "'": '\\\''};
		#elements = {'"': "\"\"", "'": '\'\''};
		if True:
			string = quote_ident(string, cur);
			return string;
		for key, value in elements.items():
			#print(f'key: {key}, value: {value}');
			index = 0;
			indexes = self.__indexes(string, key, index);
			print(f'working on string with indexes {indexes} in key {key}');
			if len(indexes) == 0:
				continue;
			nextIndex = indexes[0];
			#print(f'first index: {nextIndex}');
			escapePart = value.replace(key, '');
			#print(f'EscapePart: {escapePart}');
			i = 0;
			while index < len(string) and i in range(len(indexes)):
				#print(f'PodÅ‚oga: {i}');
				i += 1;
				index = nextIndex;
				if index == 0:
					#print(f'For index {index} added {escapePart} on start');
					string = escapePart + string;
				else:
					#print(f'Index-1: {string[index-1]} and escape part: {escapePart}');
					if string[index-1] == escapePart and not passEscaped:
						string = self.__input(string, value, index);
					elif string[index-1] == escapePart and passEscaped:
						print(f'working on string with index {index} in key {key} passing it');
						pass;
					else:
						print(f'working on string with index {index} in key {key} adding escape {value}');
						string = self.__input(string, value, index);
				index = index + 1;
				nextIndex = self.__indexes(string, key, index);
				#print(f'Next indexes: {nextIndex} from index {index}');
				if len(nextIndex) == 0:
					break;
				nextIndex = nextIndex[0];
				#print(f'Next index: {nextIndex}');
		print(f'worked on string: {string}; as raw');
		return string;
	
	def array(self, array):
		escapedArray = [];
		for item in array:
			if type(item) is int:
				print('int in array detected')
				pass;
			elif type(item) is str:
				print('string in array detected')
				item = self.string(item);
			elif isinstance(item, list):
				print('array in array detected')
				item = self.array(item);
			elif isinstance(item, dict):
				print('dictionary in array detected')
				item = self.dictionary(item);
			else:
				pass;
			escapedArray.append(item);
		return escapedArray;
		
	
	def dictionary(self, dictionary):
		escapedDictionary = {};
		for key, value in dictionary.items():
			if type(key) is int:
				print('int in dict key detected')
				pass;
			elif type(key) is str:
				print('string in dict key detected')
				key = self.string(key);
			else:
				pass;
			if type(value) is int:
				print('int in dict value detected')
				pass;
			elif type(value) is str:
				print('string in dict value detected')
				value = self.string(value);
			elif isinstance(value, list):
				print('list in dict value detected')
				value = self.array(value);
			elif isinstance(value, dict):
				print('dict in dict value detected')
				value = self.dictionary(value);
			else:
				pass;
			escapedDictionary[key] = value;
		return escapedDictionary;
	
	def wrap(self, values):
		#values = ",".join("'"+ v + "'" if type(v) is str else str(v) for v in values);
		values = ",".join('"'+ v + '"' if type(v) is str else '"' + str(v) + '"' for v in values);
		return values;
	
class Decode():
	def string(self, string):
		string = string.replace('""', '"');
		return string;
	
	
